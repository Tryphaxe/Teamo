generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administrateur {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  nom       String
  prenom    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("ADMIN")
}

model Departement {
  id        Int       @id @default(autoincrement())
  nom       String    @unique
  createdAt DateTime  @default(now())
  employes  Employe[]
}

model Employe {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  password      String
  nom           String
  prenom        String
  departementId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  dateEntree    DateTime    @default(now())
  dateNaissance DateTime
  poste         String
  salaire       Float
  adresse       String?
  genre         String?
  telephone     String?
  role          String      @default("EMPLOYE")
  conges        Conge[]
  depenses      Depense[]
  departement   Departement @relation(fields: [departementId], references: [id])
  Presenses     Presence[]
}

model Client {
  id        Int      @id @default(autoincrement())
  nom       String
  createdAt DateTime @default(now())
  projets   Projet[]
}

model Projet {
  id        Int       @id @default(autoincrement())
  nom       String
  clientId  Int
  createdAt DateTime  @default(now())
  depenses  Depense[]
  client    Client    @relation(fields: [clientId], references: [id])
}

model Depense {
  id          Int           @id @default(autoincrement())
  employeId   Int
  projetId    Int
  montant     Float
  description String?
  statut      StatutDepense @default(EN_ATTENTE)
  date        DateTime      @default(now())
  createdAt   DateTime      @default(now())
  employe     Employe       @relation(fields: [employeId], references: [id])
  projet      Projet        @relation(fields: [projetId], references: [id])
}

model Conge {
  id        Int         @id @default(autoincrement())
  employeId Int
  dateDebut DateTime
  dateFin   DateTime
  type      TypeConge
  statut    StatutConge @default(EN_ATTENTE)
  raison    String?
  createdAt DateTime    @default(now())
  employe   Employe     @relation(fields: [employeId], references: [id])
}

model Vacance {
  id        Int      @id @default(autoincrement())
  nom       String
  dateDebut DateTime
  dateFin   DateTime
}

model Presence {
  id        Int      @id @default(autoincrement())
  employeId Int
  date      DateTime @default(now())
  present   Boolean
  employe   Employe  @relation(fields: [employeId], references: [id])
}

enum StatutDepense {
  EN_ATTENTE
  ACCEPTE
  REFUSE
}

enum TypeConge {
  MALADIE
  PERSONNEL
  AUTRE
  VACANCES
}

enum StatutConge {
  EN_ATTENTE
  VALIDE
  REFUSE
}
