generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nom       String
  prenom    String
  role      Role     @default(EMPLOYE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Champs spécifiques employés (nullable pour les admins)
  departementId String?
  dateEntree    DateTime? @default(now())
  dateSortie    DateTime?
  dateNaissance DateTime?
  poste         String?
  salaire       Float?
  adresse       String?
  genre         String?
  telephone     String?
  archived      Boolean   @default(false)

  // Relations
  departement Departement? @relation(fields: [departementId], references: [id])
  conges      Conge[]
  depenses    Depense[]
  presences   Presence[]
  files       UserFile[]
  userNotifs  Notification[] @relation("userNotifs")
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String?
  isRead    Boolean  @default(false)
  targetRole  RoleNotif      @default(ADMIN)
  createdAt DateTime @default(now())

  sender User? @relation("userNotifs", fields: [userId], references: [id])
}

model UserFile {
  id     String @id @default(cuid())
  name   String
  url    String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Departement {
  id        String   @id @default(cuid())
  nom       String   @unique
  createdAt DateTime @default(now())
  employes  User[]
}

model Client {
  id        String   @id @default(cuid())
  nom       String
  createdAt DateTime @default(now())
  projets   Projet[]
}

model Projet {
  id        String   @id @default(cuid())
  nom       String
  clientId  String
  createdAt DateTime @default(now())
  depenses  Depense[]
  client    Client   @relation(fields: [clientId], references: [id])
}

model Depense {
  id          String        @id @default(cuid())
  employeId   String
  projetId    String
  montant     Float
  description String?
  statut      StatutDepense @default(EN_ATTENTE)
  date        DateTime      @default(now())
  createdAt   DateTime      @default(now())
  employe     User          @relation(fields: [employeId], references: [id])
  projet      Projet        @relation(fields: [projetId], references: [id])
  fichiers   DepenseFile[]
}

model DepenseFile {
  id         String   @id @default(cuid())
  name       String
  url        String
  depenseId  String
  depense    Depense  @relation(fields: [depenseId], references: [id])
  createdAt  DateTime @default(now())
}

model Conge {
  id        String      @id @default(cuid())
  employeId String
  dateDebut DateTime
  dateFin   DateTime
  type      TypeConge
  statut    StatutConge @default(EN_ATTENTE)
  raison    String?
  createdAt DateTime    @default(now())
  employe   User        @relation(fields: [employeId], references: [id])
}

model Vacance {
  id        String   @id @default(cuid())
  nom       String
  dateDebut DateTime
  dateFin   DateTime
}

model Presence {
  id        String   @id @default(cuid())
  employeId String
  date      DateTime @default(now())
  present   Boolean
  employe   User     @relation(fields: [employeId], references: [id])
}

enum RoleNotif {
  USER
  ADMIN
}

enum Role {
  ADMIN
  COMPT
  EMPLOYE
}

enum StatutDepense {
  EN_ATTENTE
  ACCEPTE
  REFUSE
}

enum TypeConge {
  MALADIE
  PERSONNEL
  AUTRE
  VACANCES
}

enum StatutConge {
  EN_ATTENTE
  VALIDE
  REFUSE
}